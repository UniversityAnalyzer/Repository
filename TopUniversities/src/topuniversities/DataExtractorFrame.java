/**
 * Copyright (C) 2013 Marco Tizzoni <marco.tizzoni@gmail.com>
 *
 * This file is part of j-google-trends-api
 *
 *     j-google-trends-api is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     j-google-trends-api is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with j-google-trends-api.  If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package topuniversities;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.UIManager;

/**
 *
 * @author Evertson
 */
public class DataExtractorFrame extends javax.swing.JFrame implements ActionListener {

	private DataExtractor de;

    /**
     * Creates new form DataExtractorFrame
     */
    public DataExtractorFrame() {
        initComponents();
        this.setTitle("Data Extractor");
        evaluateButton.setVisible(false);
        saveButton.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ExtractorPanel = new javax.swing.JPanel();
        contentPane = new javax.swing.JTabbedPane();
        startButton = new javax.swing.JButton();
        evaluateButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        contentPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                contentPaneStateChanged(evt);
            }
        });

        javax.swing.GroupLayout ExtractorPanelLayout = new javax.swing.GroupLayout(ExtractorPanel);
        ExtractorPanel.setLayout(ExtractorPanelLayout);
        ExtractorPanelLayout.setHorizontalGroup(
            ExtractorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ExtractorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(contentPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1336, Short.MAX_VALUE))
        );
        ExtractorPanelLayout.setVerticalGroup(
            ExtractorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ExtractorPanelLayout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addComponent(contentPane, javax.swing.GroupLayout.PREFERRED_SIZE, 642, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        evaluateButton.setText("Evaluate");
        evaluateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evaluateButtonActionPerformed(evt);
            }
        });

        loadButton.setText("Load");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(startButton)
                .addGap(23, 23, 23)
                .addComponent(loadButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1073, Short.MAX_VALUE)
                .addComponent(evaluateButton))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(ExtractorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(evaluateButton)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton)
                    .addComponent(saveButton)
                    .addComponent(loadButton))
                .addContainerGap(674, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(ExtractorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        startButton.setVisible(false);

        de = new DataExtractor();
        for (int i = 0; i < de.getYears().length; i++) {
            DataTable tb = new DataTable();
            tb.setTable(de.getUniversities(), i);
            setDoubleClickListener(tb);
            contentPane.addTab(de.getYears()[i] + "", tb);
        }
        DataTable tb = new DataTable();
        tb.setTable(de.getEntropies(), -1);
        setDoubleClickListener(tb);
        contentPane.addTab("Entropy", tb);
        EvaluationPanel ep = new EvaluationPanel();
        ep.setDataExtractor(de);
        contentPane.addTab("Evaluation", ep);
        CorrelationPanel cp = new CorrelationPanel();
        cp.setDataExtractor(de);
        contentPane.addTab("Correlations", cp);
        PredictionPanel pp = new PredictionPanel();
        pp.setDataExtractor(de);
        contentPane.addTab("Prediction", pp);
    }//GEN-LAST:event_startButtonActionPerformed

    private void setDoubleClickListener(DataTable dt) {
        dt.getTable().addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    evaluateButtonActionPerformed(null);
                }
            }
        });
    }

    private void contentPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_contentPaneStateChanged
        if (contentPane.getModel().getSelectedIndex() == (de.getYears().length + 1)) {
            evaluateButton.setVisible(false);
        } else {
            evaluateButton.setVisible(true);
        }
    }//GEN-LAST:event_contentPaneStateChanged

    private void evaluateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evaluateButtonActionPerformed
        DataTable dt = (DataTable) contentPane.getSelectedComponent();
        int row = dt.getTable().getSelectedRow();
        int ranking = Integer.parseInt(dt.getTable().getModel().getValueAt(row, 0).toString());
        if (contentPane.getSelectedIndex() < de.getYears().length) {
            contentPane.setSelectedIndex(de.getYears().length + 1);
            EvaluationPanel ep = (EvaluationPanel) contentPane.getSelectedComponent();
            ep.evaluateRanking(ranking);
        } else {
            contentPane.setSelectedIndex(de.getYears().length + 1);
            EvaluationPanel ep = (EvaluationPanel) contentPane.getSelectedComponent();
            ep.evaluateEntropy(ranking);
        }
    }//GEN-LAST:event_evaluateButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        de = new DataExtractor(FileIO.loadObjects());
        
        for (int i = 0; i < de.getYears().length; i++) {
            DataTable tb = new DataTable();
            tb.setTable(de.getUniversities(), i);
            setDoubleClickListener(tb);
            contentPane.addTab(de.getYears()[i] + "", tb);
        }
        DataTable tb = new DataTable();
        tb.setTable(de.getEntropies(), -1);
        setDoubleClickListener(tb);
        contentPane.addTab("Entropy", tb);
        EvaluationPanel ep = new EvaluationPanel();
        ep.setDataExtractor(de);
        contentPane.addTab("Evaluation", ep);
        CorrelationPanel cp = new CorrelationPanel();
        cp.setDataExtractor(de);
        contentPane.addTab("Correlations", cp);
        PredictionPanel pp = new PredictionPanel();
        pp.setDataExtractor(de);
        contentPane.addTab("Prediction", pp);
        
    }//GEN-LAST:event_loadButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        FileIO.saveObjects(de.getUniversities(),de.getEntropies());
    }//GEN-LAST:event_saveButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
         try {
            UIManager.setLookAndFeel(
                    UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DataExtractorFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ExtractorPanel;
    private javax.swing.JTabbedPane contentPane;
    private javax.swing.JButton evaluateButton;
    private javax.swing.JButton loadButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton startButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {

        throw new UnsupportedOperationException("Not supported yet.");
    }
}
