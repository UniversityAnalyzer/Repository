/**
 * Copyright (C) 2013 Marco Tizzoni <marco.tizzoni@gmail.com>
 *
 * This file is part of j-google-trends-api
 *
 * j-google-trends-api is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * j-google-trends-api is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * j-google-trends-api. If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package topuniversities;

import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.ImageIcon;
import org.apache.commons.configuration.ConfigurationException;


import org.freaknet.gtrends.api.exceptions.GoogleTrendsClientException;
import org.freaknet.gtrends.api.exceptions.GoogleTrendsRequestException;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import radboud.UniversityParser;

/**
 *
 * @author Evertson
 */
public class EvaluationPanel extends javax.swing.JPanel {

    private DataExtractor de;
    private University currentUni;
    private DefaultCategoryDataset line_chart_dataset = null;
    private ArrayList<ArrayList<ValueKeeper>> values = new ArrayList<ArrayList<ValueKeeper>>();
    private UniversityParser up;

    /**
     * Creates new form EvaluationPanel
     */
    public EvaluationPanel() {
        initComponents();
        up = new UniversityParser();
    }

    public void setDataExtractor(DataExtractor de) {
        this.de = de;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        rankingRadioButton = new javax.swing.JRadioButton();
        entropyRadioButton = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        rankingTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        rankingTable = new javax.swing.JTable();
        evaluateButton = new javax.swing.JButton();
        nameLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        searchTermTextField = new javax.swing.JTextField();
        clearButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        graphLabel = new javax.swing.JLabel();
        compareButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        trendsTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(1330, 300));

        buttonGroup.add(rankingRadioButton);
        rankingRadioButton.setSelected(true);
        rankingRadioButton.setText("World Ranking");

        buttonGroup.add(entropyRadioButton);
        entropyRadioButton.setText("Entropy");

        jLabel1.setText("Ranking:");

        rankingTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rankingTextFieldActionPerformed(evt);
            }
        });

        rankingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(rankingTable);

        evaluateButton.setText("Evaluate");
        evaluateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evaluateButtonActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Google Trends"));

        jLabel2.setText("Search Term:");

        searchTermTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchTermTextFieldMouseClicked(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchTermTextField))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 620, Short.MAX_VALUE)
                        .addComponent(clearButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addButton)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(searchTermTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearButton)
                    .addComponent(addButton)))
        );

        compareButton.setText("Compare");
        compareButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compareButtonActionPerformed(evt);
            }
        });

        trendsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(trendsTable);

        jLabel3.setText("Google Trends data");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 1116, Short.MAX_VALUE)
                                .addComponent(nameLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(graphLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(177, 177, 177))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rankingRadioButton)
                            .addComponent(entropyRadioButton)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rankingTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(evaluateButton)))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(compareButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rankingRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(entropyRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rankingTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(evaluateButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(compareButton)))
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(graphLabel)
                        .addGap(0, 194, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void rankingTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rankingTextFieldActionPerformed
    }//GEN-LAST:event_rankingTextFieldActionPerformed

    public void evaluateRanking(int ranking) {
        rankingRadioButton.setSelected(true);
        rankingTextField.setText(ranking + "");
        evaluateButtonActionPerformed(null);
    }

    public void evaluateEntropy(int ranking) {
        entropyRadioButton.setSelected(true);
        rankingTextField.setText(ranking + "");
        evaluateButtonActionPerformed(null);
    }

    private void evaluateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evaluateButtonActionPerformed
        Integer ranking = 0;
        try {
            ranking = Integer.parseInt(rankingTextField.getText());
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (ranking > 0 && ranking < de.getUniversities().size()) {

            if (rankingRadioButton.isSelected()) {
                currentUni = de.getUniversities().get(ranking - 1);
                rankingTable.setModel(new EvaluationModel(currentUni, de.getYears()));
                nameLabel.setText(currentUni.getName());
                try {
                    createUniversityChart();
                } catch (IOException ex) {
                    Logger.getLogger(EvaluationPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                currentUni = de.getEntropies().get(ranking - 1);
                rankingTable.setModel(new EvaluationModel(currentUni, de.getYears()));
                nameLabel.setText(currentUni.getName());
                try {
                    createUniversityChart();
                } catch (IOException ex) {
                    Logger.getLogger(EvaluationPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        } else {
        }
    }//GEN-LAST:event_evaluateButtonActionPerformed

    private void compareButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compareButtonActionPerformed
    }//GEN-LAST:event_compareButtonActionPerformed

    private Double[] convertToDoubles(int[] data) {
        Double[] result = new Double[data.length];
        for (int i = 0; i < data.length; i++) {
            Double d = Double.parseDouble(data[i] + "");
            result[i] = d;
            System.out.println("Search volume " + de.getYears()[i] + " " + d);
        }

        return result;
    }

    private ArrayList<Double> getRel(Double[] data) {
        ArrayList<Double> result = new ArrayList<Double>();
        Double highest = 0.0;
        Double lowest = 101.0;
        for (int i = 0; i < data.length; i++) {
            Double rep = data[i];
            if (rep > highest) {
                highest = rep;
            }
            if (rep < lowest) {
                lowest = rep;
            }
        }
        for (int i = 0; i < data.length; i++) {
            Double rep = data[i];
            DecimalFormat df = new DecimalFormat("#.##");
            Double relative = 0.0;
            if (highest - lowest == 0.0) {
                relative = 100.0;
            } else {
                String roundedRelative = df.format(((rep - lowest) / (highest - lowest)) * 100.0);
                roundedRelative = roundedRelative.replace(',', '.');
                relative = Double.parseDouble(roundedRelative);
            }
            result.add(relative);
        }
        return result;
    }

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        ArrayList<ValueKeeper> result = null;
        for (int i = 0; i < values.size(); i++) {
            ArrayList<ValueKeeper> value = values.get(i);
            if (((ValueKeeper) value.get(0)).isTU) {
                result = value;
                i = values.size();
            }
        }
        DefaultCategoryDataset new_d = new DefaultCategoryDataset();
        for (int i = 0; i < result.size(); i++) {
            ValueKeeper vk = result.get(i);
            new_d.addValue(vk.value, vk.getRowKey(), vk.getColumnKey());
        }
        try {
            line_chart_dataset = new_d;
            createChart(line_chart_dataset);
            ArrayList<ArrayList<ValueKeeper>> new_values = new ArrayList<ArrayList<ValueKeeper>>();
            new_values.add(result);
            values = new_values;

        } catch (IOException ex) {
            Logger.getLogger(EvaluationPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_clearButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        try {        
            String query = searchTermTextField.getText();
            int[] data = up.executeQuery(query);
            
            if(data != null) { // enough data is available for 2007-2012
                searchTermTextField.setForeground(Color.black);
                createGoogleTrendsChart(getRel(convertToDoubles(data)), query);
                trendsTable.setModel(new TrendsModel(convertToDoubles(data), de.getYears()));
            }
            else { // Houston we have a problem (bad search term)
                searchTermTextField.setBackground(Color.red);
                System.out.println("Not enough data for search term: " + query);
            }
            
        } catch (ConfigurationException ex) {
            Logger.getLogger(EvaluationPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (URISyntaxException ex) {
            Logger.getLogger(EvaluationPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (GoogleTrendsClientException ex) {
            Logger.getLogger(EvaluationPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (GoogleTrendsRequestException ex) {
            Logger.getLogger(EvaluationPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(EvaluationPanel.class.getName()).log(Level.SEVERE, null, ex);
        }       
    }//GEN-LAST:event_addButtonActionPerformed

    private void searchTermTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchTermTextFieldMouseClicked
        searchTermTextField.setBackground(Color.white);
    }//GEN-LAST:event_searchTermTextFieldMouseClicked

    public class ValueKeeper {

        private Number value;
        private Comparable rowKey;
        private Comparable columnKey;
        private boolean isTU;

        public ValueKeeper(boolean isTU, Number value, Comparable rowkey, Comparable columnKey) {
            this.isTU = isTU;
            this.value = value;
            this.rowKey = rowkey;
            this.columnKey = columnKey;
        }

        public boolean isTU() {
            return this.isTU;
        }

        public Number getValue() {
            return this.value;
        }

        public Comparable getRowKey() {
            return this.rowKey;
        }

        public Comparable getColumnKey() {
            return this.columnKey;
        }
    }

    private void createUniversityChart() throws IOException {
        if (line_chart_dataset == null) {
            line_chart_dataset = new DefaultCategoryDataset();
        }

        ArrayList<Double> rel = currentUni.getRel();
        ArrayList<ValueKeeper> new_v = new ArrayList<ValueKeeper>();
        for (int i = 0; i < rel.size(); i++) {
            line_chart_dataset.addValue(rel.get(i), "Top Universities", de.getYears()[i] + "");
            new_v.add(new ValueKeeper(true, rel.get(i), "Top Universities", de.getYears()[i] + ""));
        }
        values.add(new_v);
        createChart(line_chart_dataset);
    }

    private void createGoogleTrendsChart(ArrayList<Double> data, String name) throws IOException {
        if (line_chart_dataset == null) {
            line_chart_dataset = new DefaultCategoryDataset();
        }
        ArrayList<ValueKeeper> new_v = new ArrayList<ValueKeeper>();
        for (int i = 0; i < de.getYears().length; i++) {
            line_chart_dataset.addValue(data.get(i), name, de.getYears()[i] + "");
            new_v.add(new ValueKeeper(false, data.get(i), name, de.getYears()[i] + ""));
        }
        values.add(new_v);
        createChart(line_chart_dataset);
    }

    private void createChart(DefaultCategoryDataset line_chart_dataset) throws IOException {
        String title = "";
        if (currentUni == null) {
            title = "Trends data";
        } else {
            title = currentUni.getName();
        }
        JFreeChart lineChartObject = ChartFactory.createLineChart(title, "Year", "Relevance", line_chart_dataset, PlotOrientation.VERTICAL, true, true, false);
        int width = 760; /* Width of the image */
        int height = 350; /* Height of the image */
        File lineChart = new File("line_Chart.png");
        ChartUtilities.saveChartAsPNG(lineChart, lineChartObject, width, height);
        ImageIcon image = new ImageIcon(lineChart.getAbsolutePath());
        image.getImage().flush();
        graphLabel.setIcon(image);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton compareButton;
    private javax.swing.JRadioButton entropyRadioButton;
    private javax.swing.JButton evaluateButton;
    private javax.swing.JLabel graphLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JRadioButton rankingRadioButton;
    private javax.swing.JTable rankingTable;
    private javax.swing.JTextField rankingTextField;
    private javax.swing.JTextField searchTermTextField;
    private javax.swing.JTable trendsTable;
    // End of variables declaration//GEN-END:variables
}
